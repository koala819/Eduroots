apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.instance.name }}-postgres
  namespace: {{ .Values.instance.name }}
  labels:
    app: {{ .Values.instance.name }}-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.instance.name }}-postgres
  template:
    metadata:
      labels:
        app: {{ .Values.instance.name }}-postgres
    spec:
      containers:
      - name: postgres
        image: {{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}
        envFrom:
        - secretRef:
            name: {{ .Values.instance.name }}-secrets
        - configMapRef:
            name: {{ .Values.instance.name }}-config
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: migrations
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U {{ .Values.postgres.username }}
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - pg_isready -U {{ .Values.postgres.username }}
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: {{ .Values.instance.name }}-postgres-pvc
      - name: migrations
        configMap:
          name: {{ .Values.instance.name }}-migrations
